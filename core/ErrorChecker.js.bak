class SmartErrorChecker {
    constructor(statusBar, settingsBtn) {
        // 初始化管理器
        this.configManager = new ConfigManager();
        this.apiManager = new APIManager();
        this.localLinter = new LocalLinter();
        this.fileTypeDetector = new FileTypeDetector();
        this.errorFilter = new ErrorFilter();
        
        // UI组件
        this.statusBar = new StatusBar(statusBar);
        this.settingsPanel = new SettingsPanel(this, settingsBtn);
        this.annotations = new Annotations(this);
        this.officialSettings = new OfficialSettings(this);
        
        // 调试工具
        this.debugCLI = new DebugCLI(this);
        
        // 状态管理
        this.settings = this.configManager.getSettings();
        this.checkTimeout = null;
        this.errorMarkers = [];
        this.currentAnnotations = [];
        this.apiStatus = {};
        this.isInitialized = false;
        
        this.init();
    }
    
    async init() {
        try {
            console.log('🎯 SmartErrorChecker 核心初始化开始');
            
            // 更新UI显示
            this.statusBar.update({ checking: true });
            
            // 测试API连接
            await this.apiManager.testConnections();
            console.log('✅ API连接测试完成');
            
            // 设置错误检查
            this.setupErrorChecking();
            
            // 注册官方设置
            this.officialSettings.register();
            
            // 设置全局CLI
            this.setupGlobalCLI();
            
            // 更新UI状态
            this.updateUI();
            
            this.isInitialized = true;
            console.log('✅ SmartErrorChecker 核心初始化完成');
            
            // 延迟执行首次检查
            if (this.settings.enabled) {
                setTimeout(() => {
                    this.checkWithSmartService();
                }, 2000);
            }
            
        } catch (error) {
            console.error('❌ 核心初始化失败:', error);
            this.statusBar.update({ 
                errors: [],
                message: '初始化失败'
            });
            this.showNotification('检查器初始化失败: ' + error.message, 'error');
        }
    }
    
    setupErrorChecking() {
        if (this.checkTimeout) {
            clearTimeout(this.checkTimeout);
        }
        
        const checkDelay = this.settings.checkDelay || 1500;
        
        if (this.settings.enabled && this.settings.realtimeChecking) {
            try {
                if (editorManager && editorManager.editor) {
                    // 移除可能存在的旧监听器
                    editorManager.editor.off('change');
                    
                    // 添加新的变化监听
                    editorManager.editor.on('change', () => {
                        clearTimeout(this.checkTimeout);
                        this.checkTimeout = setTimeout(() => {
                            this.checkWithSmartService();
                        }, checkDelay);
                    });
                    
                    console.log('✅ 实时检查监听器设置成功');
                }
            } catch (error) {
                console.warn('❌ 设置变化监听失败:', error);
            }
        }
    }
    
    async checkWithSmartService() {
        if (!this.settings.enabled || !this.isInitialized) {
            return;
        }
        
        try {
            const file = editorManager?.activeFile;
            if (!file) {
                this.annotations.clearAll();
                this.statusBar.update({ errors: [] });
                return;
            }
            
            const fileType = this.fileTypeDetector.getFileType(file.name);
            const content = editorManager.editor.getValue();
            
            // 空文件检查
            if (!content.trim()) {
                this.annotations.clearAll();
                this.statusBar.update({ errors: [] });
                return;
            }
            
            // 不支持的文件类型
            if (fileType === 'unknown') {
                this.statusBar.update({ 
                    errors: [],
                    message: '不支持的文件类型'
                });
                return;
            }
            
            console.log(`🔍 开始检查 ${fileType} 文件: ${file.name}`);
            this.statusBar.update({ checking: true, fileType });
            
            let errors = [];
            
            // 选择检查方式
            if (this.settings.useAPI && this.apiManager.isAvailable(fileType)) {
                try {
                    console.log(`🌐 使用API检查 ${fileType} 代码`);
                    errors = await this.apiManager.lintWithAPI(content, fileType);
                } catch (apiError) {
                    console.warn(`API检查失败: ${apiError.message}`);
                    if (this.settings.fallbackToLocal) {
                        console.log('🔄 回退到本地检查');
                        errors = await this.localLinter.lint(content, fileType);
                    }
                }
            } else {
                console.log(`💻 使用本地检查 ${fileType} 代码`);
                errors = await this.localLinter.lint(content, fileType);
            }
            
            // 过滤错误并显示
            const filteredErrors = this.errorFilter.filter(errors, this.settings.severityLevel);
            this.annotations.display(filteredErrors);
            this.statusBar.update({ errors: filteredErrors });
            
            // 存储结果到CLI
            if (this.debugCLI) {
                this.debugCLI.storeCheckResult(filteredErrors, {
                    name: file.name,
                    type: fileType,
                    size: content.length,
                    lines: content.split('\n').length
                });
            }
            
            console.log(`✅ 检查完成: ${filteredErrors.length} 个问题`);
            
        } catch (error) {
            console.error('❌ 代码检查失败:', error);
            this.statusBar.update({ errors: [] });
            this.showNotification('检查失败: ' + error.message, 'error');
            
            // 在CLI中记录错误
            if (this.debugCLI) {
                this.debugCLI.storeCheckResult([], {
                    name: editorManager?.activeFile?.name || 'unknown',
                    type: 'error',
                    error: error.message
                });
            }
        }
    }
    
    setupGlobalCLI() {
        // 暴露调试接口到全局
        window.SMART_ERROR_CLI = this.debugCLI;
        window.smartErrorCheckerCLI = this.debugCLI;
        
        console.log('✅ 调试命令行已启用');
        console.log('💡 使用: SMART_ERROR_CLI.execute("help") 查看命令');
    }
    
    // 设置相关方法
    toggleEnabled() {
        this.settings.enabled = !this.settings.enabled;
        this.configManager.saveSettings(this.settings);
        this.applySettings();
        
        const message = this.settings.enabled ? '检查器已启用' : '检查器已禁用';
        this.showNotification(message);
    }
    
    toggleAPIMode() {
        this.settings.useAPI = !this.settings.useAPI;
        this.configManager.saveSettings(this.settings);
        this.applySettings();
        
        const message = this.settings.useAPI ? '已切换到API模式' : '已切换到本地模式';
        this.showNotification(message);
        
        // 重新检查以应用新模式
        setTimeout(() => this.checkWithSmartService(), 500);
    }
    
    applySettings() {
        this.updateUI();
        this.setupErrorChecking();
        
        if (this.settings.enabled) {
            setTimeout(() => this.checkWithSmartService(), 500);
        } else {
            this.annotations.clearAll();
            this.statusBar.update({ errors: [] });
        }
    }
    
    updateUI() {
        this.statusBar.updateVisibility(this.settings.enabled);
        this.settingsPanel.updateVisibility(this.settings.enabled);
    }
    
    // 工具方法
    showNotification(message, type = 'info') {
        console.log(`🔔 ${message}`);
        if (window.toast) {
            window.toast(message, 2000);
        }
        
        // 备用通知方式
        if (type === 'error') {
            this.statusBar.update({ message: `❌ ${message}` });
        }
    }
    
    openSettings() {
        if (this.officialSettings.isSupported()) {
            this.officialSettings.open();
        } else {
            this.settingsPanel.show();
        }
    }
    
    // 调试方法
    debug() {
        return this.debugCLI ? this.debugCLI.execute('info') : '调试CLI不可用';
    }
    
    // 清理方法
    destroy() {
        console.log('🔧 SmartErrorChecker 开始清理...');
        
        // 清理检查定时器
        if (this.checkTimeout) {
            clearTimeout(this.checkTimeout);
            this.checkTimeout = null;
        }
        
        // 清理注解和标记
        this.annotations.clearAll();
        
        // 清理UI组件
        this.statusBar.destroy();
        this.settingsPanel.destroy();
        
        // 清理全局引用
        window.SMART_ERROR_CLI = null;
        window.smartErrorCheckerCLI = null;
        
        console.log('✅ SmartErrorChecker 清理完成');
    }
    
    // 快速操作菜单
    showQuickActions() {
        const actions = [
            '1. 重新检查代码',
            '2. ' + (this.settings.enabled ? '禁用检查器' : '启用检查器'),
            '3. ' + (this.settings.useAPI ? '切换到本地模式' : '切换到API模式'),
            '4. 打开设置',
            '5. 测试API连接',
            '6. 清除所有标记',
            '7. 调试信息'
        ].join('\n');
        
        const choice = prompt(`🔧 SmartErrorChecker\n\n${actions}\n\n选择操作:`, '1');
        
        switch(choice) {
            case '1': this.checkWithSmartService(); break;
            case '2': this.toggleEnabled(); break;
            case '3': this.toggleAPIMode(); break;
            case '4': this.openSettings(); break;
            case '5': this.apiManager.testConnections().then(() => {
                this.showNotification('API连接测试完成');
            }); break;
            case '6': this.annotations.clearAll(); break;
            case '7': this.debug(); break;
        }
    }
}
if (typeof window != 'undefined') {
    window.SmartErrorChecker = SmartErrorChecker;
}